
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from state import App, Drive
from main import ADMIN_ID


import keyboards as kb



# –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ


async def delete_prev_qna(message: Message):
    try:
        await message.bot.delete_message(message.chat.id, message.message_id - 1)  # –≤–æ–ø—Ä–æ—Å
        await message.bot.delete_message(message.chat.id, message.message_id)      # –æ—Ç–≤–µ—Ç
    except:
        pass


async def app_name(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    full_name = message.text.strip()
    await state.update_data(name=full_name)
    await state.set_state(App.phone)
    await message.answer("üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

async def app_phone(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    await state.update_data(phone=message.text)
    await state.set_state(App.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ", reply_markup=kb.category_keyboard)

async def app_category(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    await state.update_data(category=message.text)
    await state.set_state(App.time)
    await message.answer("‚è∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?")


async def app_time(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    await state.update_data(time=message.text)
    await state.set_state(App.payment)
    await message.answer("üí≥ –£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=kb.payment_keyboard)


async def app_payment(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    await state.update_data(payment=message.text)
    data = await state.get_data()

    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"

    application_text = (
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ\n"
        f"üë§ –û—Ç: @{username} (ID:{user_id})\n\n"
        f"üìù –§.–ò.–û:     {data['name']}\n"
        f"üìû –ù–æ–º–µ—Ä:     {data['phone']}\n"
        f"üèç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"‚è∞ –í—Ä–µ–º—è:     {data['time']}\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞:    {data['payment']}"
    )

    await message.answer(application_text, reply_markup=kb.main_page_keyboard)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
    try:
        await message.bot.send_message(ADMIN_ID,
                                       f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n{application_text}",
                                       reply_markup=kb.get_admin_action_keyboard(user_id))
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ê–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ")
    await state.clear()

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!", reply_markup=kb.main_page_keyboard)


async def handle_app(message: Message, state: FSMContext):              # (1—Å–ø–æ—Å–æ–±)
    current_state = await state.get_state()
    if current_state == App.name:
        await app_name(message, state)
    elif current_state == App.phone:
        await app_phone(message, state)
    elif current_state == App.category:
        await app_category(message, state)
    elif current_state == App.time:
        await app_time(message, state)
    elif current_state == App.payment:
        await app_payment(message, state)


#----------------------------------
# –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∂–¥–µ–Ω–∏–µ


async def drive_name(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    await state.update_data(name=message.text)
    await state.set_state(Drive.d_phone)
    await message.answer("üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


async def drive_phone(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    await state.update_data(phone=message.text)
    await state.set_state(Drive.d_stage)
    await message.answer("üß≠ –£ –≤–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç –∏–ª–∏ –≤—ã –Ω–æ–≤–∏—á—ë–∫?", reply_markup=kb.stage_keyboard)


async def drive_stage(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    await state.update_data(stage=message.text)
    await state.set_state(Drive.d_type_car)
    await message.answer("üöó –ù–∞–ø–∏—à–∏—Ç–µ '–º–µ—Ö–∞–Ω–∏–∫–∞' –∏–ª–∏ '–∞–≤—Ç–æ–º–∞—Ç'", reply_markup=kb.car_type_keyboard)


async def drive_car(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    await state.update_data(car=message.text)
    await state.set_state(Drive.d_amount)
    await message.answer("‚úèÔ∏è –°–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ?")


async def drive_amount(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    await state.update_data(amount=message.text)
    await state.set_state(Drive.d_time)
    await message.answer("‚è∞ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π")


async def drive_time(message: Message, state: FSMContext):
    await delete_prev_qna(message)
    await state.update_data(time=message.text)
    data = await state.get_data()

    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"

    application_text = (
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∂–¥–µ–Ω–∏–µ\n"
        f"üë§ –û—Ç: @{username} (ID:{user_id})\n\n"
        f"üìù –§.–ò.–û:     {data.get('name')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω:   {data.get('phone')}\n"
        f"üß≠ –û–ø—ã—Ç:      {data.get('stage')}\n"
        f"üöó –¢–∏–ø –∞–≤—Ç–æ:  {data.get('car')}\n"
        f"‚úèÔ∏è –ó–∞–Ω—è—Ç–∏–π:   {data.get('amount')}\n"
        f"‚è∞ –í—Ä–µ–º—è:     {data.get('time')}"
    )

    await message.answer(application_text, reply_markup=kb.main_page_keyboard)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
    await message.bot.send_message(ADMIN_ID, f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n{application_text}")

    await state.clear()

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!", reply_markup=kb.main_page_keyboard)


DRIVE_HANDLERS = {                          # (2 —Å–ø–æ—Å–æ–±)
    Drive.d_name: drive_name,
    Drive.d_phone: drive_phone,
    Drive.d_stage: drive_stage,
    Drive.d_type_car: drive_car,
    Drive.d_amount: drive_amount,
    Drive.d_time: drive_time,
}

async def handle_drive(message: Message, state: FSMContext):
    current_state = await state.get_state()
    handler = DRIVE_HANDLERS.get(current_state)
    if handler:
        await handler(message, state)