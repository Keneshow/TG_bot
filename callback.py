
from aiogram.fsm.state import StatesGroup, State
from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode

class AdminReply(StatesGroup):
    waiting_for_text = State()


async def show_price(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üìã *–ü—Ä–∞–π—Å –∏ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è:*\n\n"
        "- üõµ –ö–∞—Ç–µ–≥–æ—Ä–∏—è A ‚Äî 8,000 —Å–æ–º\n"
        "- üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è B ‚Äî 14,000 —Å–æ–º\n"
        "- üöõ –ö–∞—Ç–µ–≥–æ—Ä–∏—è C ‚Äî 18,000 —Å–æ–º\n"
        "- üöò –í–æ–∂–¥–µ–Ω–∏–µ ‚Äî 5,000 —Å–æ–º\n\n"
        "- üïò –ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å 9:00 –¥–æ 18:00.",
        parse_mode=ParseMode.MARKDOWN
    )


async def reply_to_user(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split('_')[1])
    await state.update_data(reply_user_id=user_id)
    await state.set_state(AdminReply.waiting_for_text)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await callback.answer()



async def process_admin_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('reply_user_id')

    if not user_id:
        await message.answer("–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
        return

    try:
        await message.bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    await state.clear()

processed_applications = {}

async def admin_callback_handler(callback: types.CallbackQuery, bot: Bot):
    action, user_id = callback.data.split("_")

    if action == "processed":
        text = callback.message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        processed_applications[user_id] = text
        await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ‚úÖ")
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è")


    elif action == "delete":
        await callback.message.delete()
        await callback.answer("üóë –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")

    else:
        await callback.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)